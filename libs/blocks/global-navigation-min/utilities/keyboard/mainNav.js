import{selectors as e,getNextVisibleItemPosition as t,getPreviousVisibleItemPosition as o}from"./utils.js";import s from"./popup.js";import r from"./mobilePopup.js";import{closeAllDropdowns as i,trigger as n,logErrorFor as a}from"../utilities.js";export default class{constructor(){this.desktop=window.matchMedia("(min-width: 900px)"),this.popup=new s({mainNav:this}),this.mobilePopup=new r({mainNav:this}),this.addEventListeners()}addEventListeners(){document.querySelector(e.globalNavTag).addEventListener("keydown",(t=>a((()=>{if(!t.target.closest(e.globalNav))return;if(!t.target.closest(e.fedsNav)||t.target.closest(e.popup))return;const o=!!document.querySelector("header.new-nav");switch(t.code){case"Tab":if(o){document.querySelector(e.activePopup)||t.preventDefault();const o=[...document.querySelectorAll(`${e.mainMenuItems}, ${e.mainMenuLinks}, ${e.mainNavToggle}`)],s=o.findIndex((e=>e===t.target));if(s>-1){const e=s<o.length-1?s+1:0,r=s>0?s-1:o.length-1;t.shiftKey?o[r].focus():o[e].focus()}else o?.[0]?.focus();break}if(t.shiftKey){const{prev:e,openTrigger:o}=this.getState();o&&(-1===e?i():(t.preventDefault(),this.focusPrev({focus:"last"})))}break;case"Escape":{i();const t=document.querySelector(e.activePopup);if(o&&!t){const e=document.querySelector("header.new-nav .feds-toggle");e?.click(),e?.focus()}break}case"ArrowLeft":{if(o)break;const{next:e,prev:t}=this.getState();if("rtl"!==document.dir){if(-1===t)break;this.focusPrev({focus:null})}else{if(-1===e)break;this.focusNext({focus:null})}break}case"ArrowUp":if(o)break;t.preventDefault(),t.stopPropagation(),this.focusPrev({focus:"last"});break;case"ArrowRight":{if(o)break;const{next:e,prev:t,openTrigger:s}=this.getState();if("rtl"!==document.dir){if(-1===e)break;this.focusNext()}else{if(-1===t)break;this.focusPrev({focus:null})}s&&this.open();break}case"ArrowDown":{if(o)break;t.stopPropagation(),t.preventDefault();const{items:e,curr:s}=this.getState();if(e[s]&&e[s].hasAttribute("aria-haspopup"))return void this.open({focus:"first"});this.focusNext();break}}}),`mainNav key failed ${t.code}`,"gnav-keyboard","e")))}getState=()=>{const s=[...document.querySelectorAll(e.mainNavItems)],r=document.querySelector(e.expandedPopupTrigger),i=document.activeElement.closest(e.navItem)?.querySelector(e.mainNavItems),n=s.findIndex((e=>e===i));return{items:s,curr:n,prev:o(n,s),next:t(n,s),openTrigger:r}};focusCurr=()=>{const{items:e,curr:t}=this.getState();e[t].focus()};focusPrev=({focus:t}={})=>{const{items:o,prev:s}=this.getState(),r=document.querySelector(e.expandedPopupTrigger);i(),-1!==s&&(o[s].focus(),r&&this.open({focus:t}))};focusNext=()=>{const{items:e,next:t}=this.getState();-1!==t&&(i(),e[t].focus())};open=({focus:t,triggerEl:o,e:s}={})=>{const{items:r,curr:i}=this.getState(),a=o||r[i];if(!a||!a.hasAttribute("aria-haspopup"))return;s&&s.preventDefault(),"false"===a.getAttribute("aria-expanded")&&n({element:a});const c=a.parentElement;if(c.querySelector(e.popup))return void(this.desktop.matches?this.popup.open({focus:t}):this.mobilePopup.open({focus:t}));const u=new MutationObserver((()=>{u.disconnect(),this.desktop.matches?this.popup.open({focus:t}):this.mobilePopup.open({focus:t})}));u.observe(c,{childList:!0})}}